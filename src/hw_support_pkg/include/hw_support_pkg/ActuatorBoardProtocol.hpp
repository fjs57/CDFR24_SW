#ifndef ACTUATOR_BOARD_CONFIG_HPP__
#define ACTUATOR_BOARD_CONFIG_HPP__

/**
 * messages length per service and direction
 */

#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_ID_LENGTH 0
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_STATUS_LENGTH 0
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_ACK_ERRORS_LENGTH 0
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_SERVO_SET_LENGTH 4
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_MODE_LENGTH 2
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_TARGET_FREQUENCY_LENGTH 5
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_TARGET_POSITION_LENGTH 5
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_ENABLE_LENGTH 2
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_SOFT_STOP_LENGTH 1
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_HARD_STOP_LENGTH 1
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_STATE_LENGTH 1
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_MPP_CONFIG_LENGTH 6
#define ACTUATOR_BOARD_PROTOCOL_TX_SERVICE_GPIO_STATE_LENGTH 0

#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_ID_LENGTH 1
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_STATUS_LENGTH 1
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_SERVO_SET_LENGTH 5
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_MPP_TARGET_FREQUENCY_LENGTH 3
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_MPP_TARGET_POSITION_LENGTH 5
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_MPP_STATE_LENGTH 8
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_MPP_CONFIG_LENGTH 7
#define ACTUATOR_BOARD_PROTOCOL_RX_SERVICE_GPIO_STATE_LENGTH 7

namespace actuator_board
{

    typedef enum 
    {
        ID = 0,
        STATUS,
        ACK_ERRORS,
        SERVO_SET,
        MPP_MODE,
        MPP_TARGET_FREQUENCY,
        MPP_TARGET_POSITION,
        MPP_ENABLE,
        MPP_SOFT_STOP,
        MPP_HARD_STOP,
        MPP_STATE,
        MPP_CONFIG,
        GPIO_STATE,
        MAX
    }   
    services_t;

};
#endif // ACTUATOR_BOARD_CONFIG_HPP__